import React, { useState } from 'react';

function FaceMillingCalculator() {
  const [millingType, setMillingType] = useState('face');
  const [cutterDiameter, setCutterDiameter] = useState('');
  const [workpieceLength, setWorkpieceLength] = useState('');
  const [workpieceWidth, setWorkpieceWidth] = useState('');
  const [totalDepthOfCut, setTotalDepthOfCut] = useState('');
  const [depthPerPass, setDepthPerPass] = useState('');
  const [numberOfPasses, setNumberOfPasses] = useState('');
  const [overlap, setOverlap] = useState('10'); // percentage
  const [feedRate, setFeedRate] = useState('500');
  const [plungeRate, setPlungeRate] = useState('100');
  const [spindleSpeed, setSpindleSpeed] = useState('1000');
  const [safeHeight, setSafeHeight] = useState('5');
  const [rapidHeight, setRapidHeight] = useState('25');
  const [coolant, setCoolant] = useState('M08');
  const [programNumber, setProgramNumber] = useState('1001');
  const [results, setResults] = useState(null);

  const calculate = () => {
    const diameter = parseFloat(cutterDiameter);
    const length = parseFloat(workpieceLength);
    const width = parseFloat(workpieceWidth);
    const totalDepth = parseFloat(totalDepthOfCut) || 0;
    const depthIncrement = parseFloat(depthPerPass) || totalDepth;
    const overlapPercent = parseFloat(overlap) / 100;
    
    if (!diameter || !length || !width) return;
    
    // Calculate effective cutting width (considering overlap)
    const effectiveWidth = diameter * (1 - overlapPercent);
    
    // Number of passes needed to cover the width
    const passesWidth = Math.ceil(width / effectiveWidth);
    
    // Number of depth passes
    const depthPasses = totalDepth > 0 ? Math.ceil(totalDepth / depthIncrement) : 1;
    
    // Total path length
    const pathLength = length * passesWidth * depthPasses;
    
    // Time calculations
    const feed = parseFloat(feedRate) || 500;
    const cuttingTime = pathLength / feed;
    
    // Material removal rate
    let materialRemoval = 0;
    if (totalDepth) {
      materialRemoval = length * width * totalDepth;
    }
    
    setResults({
      effectiveWidth: effectiveWidth.toFixed(2),
      passesWidth,
      depthPasses,
      pathLength: pathLength.toFixed(2),
      cuttingTime: cuttingTime.toFixed(2),
      materialRemoval: materialRemoval.toFixed(2),
      stepOver: effectiveWidth.toFixed(2),
      actualDepthPerPass: totalDepth > 0 ? (totalDepth / depthPasses).toFixed(3) : '0'
    });
  };

  const generateGCode = () => {
    if (!results) return;
    
    const diameter = parseFloat(cutterDiameter);
    const length = parseFloat(workpieceLength);
    const width = parseFloat(workpieceWidth);
    const totalDepth = parseFloat(totalDepthOfCut) || 0;
    const stepOver = parseFloat(results.stepOver);
    const feed = parseFloat(feedRate);
    const plunge = parseFloat(plungeRate);
    const rpm = parseFloat(spindleSpeed);
    const safe = parseFloat(safeHeight);
    const rapid = parseFloat(rapidHeight);
    const actualDepthPerPass = parseFloat(results.actualDepthPerPass);
    
    let gcode = [];
    
    // Program header with parameters
    gcode.push(`O${programNumber} (FACE MILLING OPERATION)`);
    gcode.push('(=====================================)');
    gcode.push(`(GENERATED BY: CNC CALCULATOR WEB APP)`);
    gcode.push(`(DATE: ${new Date().toLocaleDateString()})`);
    gcode.push(`(TIME: ${new Date().toLocaleTimeString()})`);
    gcode.push('(=====================================)');
    gcode.push('(CUTTING PARAMETERS:)');
    gcode.push(`(  CUTTER DIAMETER: ${diameter} MM)`);
    gcode.push(`(  WORKPIECE SIZE: ${length} X ${width} MM)`);
    gcode.push(`(  TOTAL DEPTH: ${totalDepth} MM)`);
    gcode.push(`(  DEPTH PER PASS: ${actualDepthPerPass} MM)`);
    gcode.push(`(  STEP OVER: ${stepOver} MM [${overlap}% OVERLAP])`);
    gcode.push(`(  SPINDLE SPEED: ${rpm} RPM)`);
    gcode.push(`(  FEED RATE: ${feed} MM/MIN)`);
    gcode.push(`(  PLUNGE RATE: ${plunge} MM/MIN)`);
    gcode.push(`(  SAFE HEIGHT: ${safe} MM)`);
    gcode.push(`(  ESTIMATED TIME: ${results.cuttingTime} MIN)`);
    gcode.push('(=====================================)');
    gcode.push('');
    
    // Safety and initialization
    gcode.push('(SAFETY BLOCK)');
    gcode.push('G90 G94 G17 G49 G40 G80');
    gcode.push('G21 (METRIC)');
    gcode.push('G28 G91 Z0. (HOME Z)');
    gcode.push('G90');
    gcode.push('');
    
    // Tool change position (optional)
    gcode.push('(TOOL CHANGE)');
    gcode.push('T1 M06 (SELECT TOOL 1)');
    gcode.push(`S${rpm} M03 (SPINDLE ON CW)`);
    gcode.push(`${coolant} (COOLANT ON)`);
    gcode.push('');
    
    // Move to start position
    gcode.push('(POSITIONING)');
    gcode.push(`G00 X${(-diameter/2).toFixed(2)} Y${(-diameter/2).toFixed(2)}`);
    gcode.push(`G00 Z${safe}`);
    gcode.push('');
    
    // Main cutting loops
    let currentDepth = 0;
    
    for (let depthPass = 1; depthPass <= results.depthPasses; depthPass++) {
      currentDepth = Math.min(depthPass * actualDepthPerPass, totalDepth);
      
      gcode.push(`(DEPTH PASS ${depthPass} OF ${results.depthPasses} - Z${-currentDepth.toFixed(3)})`);
      
      let yPos = 0;
      let direction = 1; // 1 for forward, -1 for backward (zigzag pattern)
      
      for (let pass = 0; pass < results.passesWidth; pass++) {
        gcode.push(`(  WIDTH PASS ${pass + 1} OF ${results.passesWidth})`);
        
        // Position for this pass
        if (direction === 1) {
          gcode.push(`G00 X${(-diameter/2).toFixed(2)} Y${yPos.toFixed(2)}`);
        } else {
          gcode.push(`G00 X${(length + diameter/2).toFixed(2)} Y${yPos.toFixed(2)}`);
        }
        
        // Plunge to cutting depth
        gcode.push(`G01 Z${-currentDepth.toFixed(3)} F${plunge}`);
        
        // Cut across
        if (direction === 1) {
          gcode.push(`G01 X${(length + diameter/2).toFixed(2)} F${feed}`);
        } else {
          gcode.push(`G01 X${(-diameter/2).toFixed(2)} F${feed}`);
        }
        
        // Retract to safe height if not last pass
        if (pass < results.passesWidth - 1 || depthPass < results.depthPasses) {
          gcode.push(`G00 Z${safe}`);
        }
        
        yPos += stepOver;
        direction *= -1; // Reverse direction for zigzag
      }
      
      // Retract between depth passes
      if (depthPass < results.depthPasses) {
        gcode.push(`G00 Z${safe}`);
        gcode.push('');
      }
    }
    
    // Program end
    gcode.push('');
    gcode.push('(PROGRAM END)');
    gcode.push(`G00 Z${rapid} (RAPID TO SAFE HEIGHT)`);
    gcode.push('M09 (COOLANT OFF)');
    gcode.push('M05 (SPINDLE STOP)');
    gcode.push('G28 G91 Z0. (HOME Z)');
    gcode.push('G28 G91 Y0. (HOME Y)');
    gcode.push('G90');
    gcode.push('M30 (PROGRAM END)');
    gcode.push('%');
    
    return gcode.join('\n');
  };

  const downloadGCode = () => {
    const gcode = generateGCode();
    if (!gcode) return;
    
    const blob = new Blob([gcode], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `face_milling_O${programNumber}.nc`;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  const clearAll = () => {
    setCutterDiameter('');
    setWorkpieceLength('');
    setWorkpieceWidth('');
    setTotalDepthOfCut('');
    setDepthPerPass('');
    setNumberOfPasses('');
    setOverlap('10');
    setFeedRate('500');
    setPlungeRate('100');
    setSpindleSpeed('1000');
    setSafeHeight('5');
    setRapidHeight('25');
    setResults(null);
  };

  return (
    <div className="calculator-section">
      <h2>Advanced Face Milling Calculator</h2>
      
      <div className="form-row">
        <div className="form-group">
          <label htmlFor="cutterDiameter">Cutter Diameter (mm)</label>
          <input
            type="number"
            id="cutterDiameter"
            value={cutterDiameter}
            onChange={(e) => setCutterDiameter(e.target.value)}
            step="0.1"
            placeholder="Enter cutter diameter"
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="overlap">Overlap (%)</label>
          <input
            type="number"
            id="overlap"
            value={overlap}
            onChange={(e) => setOverlap(e.target.value)}
            step="5"
            min="0"
            max="50"
            placeholder="Overlap percentage"
          />
          <p className="info-text">10-30% finishing, 30-50% roughing</p>
        </div>
      </div>
      
      <div className="form-row">
        <div className="form-group">
          <label htmlFor="workpieceLength">Workpiece Length - X (mm)</label>
          <input
            type="number"
            id="workpieceLength"
            value={workpieceLength}
            onChange={(e) => setWorkpieceLength(e.target.value)}
            step="0.1"
            placeholder="Length in X direction"
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="workpieceWidth">Workpiece Width - Y (mm)</label>
          <input
            type="number"
            id="workpieceWidth"
            value={workpieceWidth}
            onChange={(e) => setWorkpieceWidth(e.target.value)}
            step="0.1"
            placeholder="Width in Y direction"
          />
        </div>
      </div>
      
      <div className="form-row">
        <div className="form-group">
          <label htmlFor="totalDepthOfCut">Total Depth - Z (mm)</label>
          <input
            type="number"
            id="totalDepthOfCut"
            value={totalDepthOfCut}
            onChange={(e) => setTotalDepthOfCut(e.target.value)}
            step="0.1"
            placeholder="Total cutting depth"
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="depthPerPass">Max Depth per Pass (mm)</label>
          <input
            type="number"
            id="depthPerPass"
            value={depthPerPass}
            onChange={(e) => setDepthPerPass(e.target.value)}
            step="0.1"
            placeholder="Incremental depth"
          />
          <p className="info-text">Leave empty for single pass</p>
        </div>
      </div>
      
      <h3 style={{ marginTop: '20px', marginBottom: '15px', color: '#667eea' }}>
        G-Code Parameters
      </h3>
      
      <div className="form-row">
        <div className="form-group">
          <label htmlFor="programNumber">Program Number</label>
          <input
            type="text"
            id="programNumber"
            value={programNumber}
            onChange={(e) => setProgramNumber(e.target.value)}
            placeholder="O1001"
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="spindleSpeed">Spindle Speed (RPM)</label>
          <input
            type="number"
            id="spindleSpeed"
            value={spindleSpeed}
            onChange={(e) => setSpindleSpeed(e.target.value)}
            step="50"
            placeholder="RPM"
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="feedRate">Feed Rate (mm/min)</label>
          <input
            type="number"
            id="feedRate"
            value={feedRate}
            onChange={(e) => setFeedRate(e.target.value)}
            step="10"
            placeholder="Feed rate"
          />
        </div>
      </div>
      
      <div className="form-row">
        <div className="form-group">
          <label htmlFor="plungeRate">Plunge Rate (mm/min)</label>
          <input
            type="number"
            id="plungeRate"
            value={plungeRate}
            onChange={(e) => setPlungeRate(e.target.value)}
            step="10"
            placeholder="Z feed rate"
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="safeHeight">Safe Height (mm)</label>
          <input
            type="number"
            id="safeHeight"
            value={safeHeight}
            onChange={(e) => setSafeHeight(e.target.value)}
            step="1"
            placeholder="Retract height"
          />
        </div>
        
        <div className="form-group">
          <label htmlFor="coolant">Coolant</label>
          <select
            id="coolant"
            value={coolant}
            onChange={(e) => setCoolant(e.target.value)}
          >
            <option value="M08">M08 - Flood</option>
            <option value="M07">M07 - Mist</option>
            <option value="(NO COOLANT)">None</option>
          </select>
        </div>
      </div>
      
      <div>
        <button className="btn" onClick={calculate}>
          Calculate
        </button>
        <button className="btn btn-secondary" onClick={clearAll}>
          Clear
        </button>
        {results && (
          <button className="btn" onClick={downloadGCode}>
            Download G-Code
          </button>
        )}
      </div>
      
      {results && (
        <div className="result-box">
          <h3>Milling Results</h3>
          
          <div className="result-item">
            <span className="result-label">Step Over (Effective Width):</span>
            <span className="result-value">{results.stepOver} mm</span>
          </div>
          
          <div className="result-item">
            <span className="result-label">Width Passes:</span>
            <span className="result-value">{results.passesWidth}</span>
          </div>
          
          {totalDepthOfCut && (
            <>
              <div className="result-item">
                <span className="result-label">Depth Passes:</span>
                <span className="result-value">{results.depthPasses}</span>
              </div>
              
              <div className="result-item">
                <span className="result-label">Actual Depth per Pass:</span>
                <span className="result-value">{results.actualDepthPerPass} mm</span>
              </div>
            </>
          )}
          
          <div className="result-item">
            <span className="result-label">Total Path Length:</span>
            <span className="result-value">{results.pathLength} mm</span>
          </div>
          
          <div className="result-item">
            <span className="result-label">Estimated Cutting Time:</span>
            <span className="result-value">{results.cuttingTime} min</span>
          </div>
          
          {totalDepthOfCut && (
            <div className="result-item">
              <span className="result-label">Material Removal Volume:</span>
              <span className="result-value">{results.materialRemoval} mm³</span>
            </div>
          )}
          
          <p className="info-text">
            💡 Tip: The calculator uses zigzag pattern for efficient toolpath
          </p>
        </div>
      )}
      
      {results && (
        <div className="result-box" style={{ marginTop: '20px' }}>
          <h3>G-Code Preview (First 50 lines)</h3>
          <pre style={{
            background: '#f7fafc',
            padding: '15px',
            borderRadius: '8px',
            fontSize: '0.85rem',
            maxHeight: '400px',
            overflow: 'auto',
            fontFamily: 'monospace'
          }}>
            {generateGCode().split('\n').slice(0, 50).join('\n')}
            {generateGCode().split('\n').length > 50 && '\n... (Download for complete code)'}
          </pre>
          <p className="info-text">
            📝 G-Code includes full parameter documentation and safety blocks
          </p>
        </div>
      )}
    </div>
  );
}

export default FaceMillingCalculator;